{ parameter
    (or (or (pair %deposit (address %address) (ticket %ticket bytes))
            (pair %update_root_hash
               (pair (pair (int %block_height) (bytes %block_payload_hash))
                     (list %current_validator_keys (option key))
                     (bytes %handles_hash))
               (pair (list %signatures (option signature)) (bytes %state_hash))
               (list %validators key_hash)))
        (pair %withdraw
           (pair (contract %callback (ticket bytes))
                 (pair %handle
                    (pair (pair (nat %amount) (bytes %data)) (nat %id) (address %owner))
                    (address %ticketer)))
           (bytes %handles_hash)
           (list %proof (pair bytes bytes)))) ;
  storage
    (pair (pair %root_hash
             (pair (pair (bytes %current_block_hash) (int %current_block_height))
                   (bytes %current_handles_hash)
                   (bytes %current_state_hash))
             (list %current_validators key_hash))
          (pair %vault
             (pair (big_map %known_handles_hash bytes unit) (big_map %used_handles nat unit))
             (big_map %vault (pair address bytes) (ticket bytes)))) ;
  code { LAMBDA
           (pair string bool)
           unit
           { UNPAIR ; SWAP ; NOT ; IF { FAILWITH } { DROP ; UNIT } } ;
         SWAP ;
         UNPAIR ;
         SWAP ;
         UNPAIR ;
         DIG 2 ;
         IF_LEFT
           { IF_LEFT
               { DIG 3 ;
                 DROP ;
                 DIG 2 ;
                 UNPAIR ;
                 UNPAIR ;
                 DIG 3 ;
                 CDR ;
                 READ_TICKET ;
                 UNPAIR ;
                 SWAP ;
                 CAR ;
                 DIG 5 ;
                 NONE (ticket bytes) ;
                 DUP 3 ;
                 DUP 5 ;
                 PAIR ;
                 GET_AND_UPDATE ;
                 IF_NONE
                   { DIG 3 ; PAIR }
                   { DIG 4 ;
                     SWAP ;
                     PAIR ;
                     JOIN_TICKETS ;
                     IF_NONE { DROP ; PUSH string "unreachable" ; FAILWITH } { PAIR } } ;
                 UNPAIR ;
                 DIG 2 ;
                 DIG 3 ;
                 PAIR ;
                 SWAP ;
                 SOME ;
                 SWAP ;
                 UPDATE ;
                 DUG 2 }
               { DUP ;
                 CDR ;
                 CDR ;
                 PACK ;
                 BLAKE2B ;
                 DUP 2 ;
                 CDR ;
                 CAR ;
                 CDR ;
                 DUP 3 ;
                 CAR ;
                 CDR ;
                 CDR ;
                 PAIR ;
                 DUP 3 ;
                 CAR ;
                 CAR ;
                 CDR ;
                 DUP 4 ;
                 CAR ;
                 CAR ;
                 CAR ;
                 PAIR ;
                 PAIR ;
                 PAIR ;
                 PACK ;
                 BLAKE2B ;
                 DUP 2 ;
                 CAR ;
                 CAR ;
                 CAR ;
                 DUP 4 ;
                 CAR ;
                 CAR ;
                 CDR ;
                 DUP 2 ;
                 COMPARE ;
                 GT ;
                 PUSH string "old block height" ;
                 PAIR ;
                 DIG 6 ;
                 SWAP ;
                 EXEC ;
                 DROP ;
                 DUP 4 ;
                 CDR ;
                 SIZE ;
                 INT ;
                 PUSH int 3 ;
                 PUSH int 2 ;
                 DIG 2 ;
                 MUL ;
                 EDIV ;
                 IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                 CAR ;
                 DUP 3 ;
                 PAIR ;
                 DUP 4 ;
                 CDR ;
                 CAR ;
                 CAR ;
                 DUP 5 ;
                 CAR ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 PAIR ;
                 LEFT unit ;
                 LOOP_LEFT
                   { UNPAIR ;
                     UNPAIR ;
                     DIG 2 ;
                     UNPAIR ;
                     DIG 2 ;
                     IF_CONS
                       { DUP ;
                         IF_NONE
                           { DUP 5 ;
                             IF_CONS
                               { IF_NONE
                                   { SWAP ;
                                     DIG 5 ;
                                     DROP 2 ;
                                     DIG 3 ;
                                     DIG 3 ;
                                     PAIR ;
                                     SWAP ;
                                     DIG 2 ;
                                     PAIR ;
                                     PAIR ;
                                     LEFT unit }
                                   { DROP 2 ;
                                     IF_NONE
                                       { DIG 3 ;
                                         IF_CONS
                                           { DROP ; DIG 3 ; DIG 3 ; PAIR ; SWAP ; DIG 2 ; PAIR ; PAIR ; LEFT unit }
                                           { DROP 3 ;
                                             PUSH string "validators and signatures have different size" ;
                                             FAILWITH } }
                                       { DROP 5 ;
                                         PUSH string "validators and signatures have different size" ;
                                         FAILWITH } } }
                               { IF_NONE
                                   { DIG 3 ;
                                     IF_CONS
                                       { DROP ; DIG 3 ; DIG 3 ; PAIR ; SWAP ; DIG 2 ; PAIR ; PAIR ; LEFT unit }
                                       { DROP 3 ;
                                         PUSH string "validators and signatures have different size" ;
                                         FAILWITH } }
                                   { DROP 5 ;
                                     PUSH string "validators and signatures have different size" ;
                                     FAILWITH } } }
                           { DUP 6 ;
                             IF_CONS
                               { IF_NONE
                                   { DROP 2 ;
                                     DUP 5 ;
                                     IF_CONS
                                       { IF_NONE
                                           { SWAP ;
                                             DIG 5 ;
                                             DROP 2 ;
                                             DIG 3 ;
                                             DIG 3 ;
                                             PAIR ;
                                             SWAP ;
                                             DIG 2 ;
                                             PAIR ;
                                             PAIR ;
                                             LEFT unit }
                                           { DROP 2 ;
                                             IF_NONE
                                               { DIG 3 ;
                                                 IF_CONS
                                                   { DROP ; DIG 3 ; DIG 3 ; PAIR ; SWAP ; DIG 2 ; PAIR ; PAIR ; LEFT unit }
                                                   { DROP 3 ;
                                                     PUSH string "validators and signatures have different size" ;
                                                     FAILWITH } }
                                               { DROP 5 ;
                                                 PUSH string "validators and signatures have different size" ;
                                                 FAILWITH } } }
                                       { IF_NONE
                                           { DIG 3 ;
                                             IF_CONS
                                               { DROP ; DIG 3 ; DIG 3 ; PAIR ; SWAP ; DIG 2 ; PAIR ; PAIR ; LEFT unit }
                                               { DROP 3 ;
                                                 PUSH string "validators and signatures have different size" ;
                                                 FAILWITH } }
                                           { DROP 5 ;
                                             PUSH string "validators and signatures have different size" ;
                                             FAILWITH } } }
                                   { DIG 3 ;
                                     DIG 7 ;
                                     DROP 2 ;
                                     DUP 5 ;
                                     SWAP ;
                                     DIG 3 ;
                                     CHECK_SIGNATURE ;
                                     IF { PUSH int 1 ;
                                          DIG 4 ;
                                          SUB ;
                                          DIG 3 ;
                                          PAIR ;
                                          SWAP ;
                                          DIG 2 ;
                                          PAIR ;
                                          PAIR ;
                                          LEFT unit }
                                        { DROP 4 ; PUSH string "bad signature" ; FAILWITH } } }
                               { DROP ;
                                 DUP 5 ;
                                 IF_CONS
                                   { IF_NONE
                                       { SWAP ;
                                         DIG 5 ;
                                         DROP 2 ;
                                         DIG 3 ;
                                         DIG 3 ;
                                         PAIR ;
                                         SWAP ;
                                         DIG 2 ;
                                         PAIR ;
                                         PAIR ;
                                         LEFT unit }
                                       { DROP 2 ;
                                         IF_NONE
                                           { DIG 3 ;
                                             IF_CONS
                                               { DROP ; DIG 3 ; DIG 3 ; PAIR ; SWAP ; DIG 2 ; PAIR ; PAIR ; LEFT unit }
                                               { DROP 3 ;
                                                 PUSH string "validators and signatures have different size" ;
                                                 FAILWITH } }
                                           { DROP 5 ;
                                             PUSH string "validators and signatures have different size" ;
                                             FAILWITH } } }
                                   { IF_NONE
                                       { DIG 3 ;
                                         IF_CONS
                                           { DROP ; DIG 3 ; DIG 3 ; PAIR ; SWAP ; DIG 2 ; PAIR ; PAIR ; LEFT unit }
                                           { DROP 3 ;
                                             PUSH string "validators and signatures have different size" ;
                                             FAILWITH } }
                                       { DROP 5 ;
                                         PUSH string "validators and signatures have different size" ;
                                         FAILWITH } } } } }
                       { DROP ;
                         SWAP ;
                         IF_CONS
                           { DROP 3 ;
                             PUSH string "validators and signatures have different size" ;
                             FAILWITH }
                           { PUSH int 0 ;
                             SWAP ;
                             COMPARE ;
                             GT ;
                             IF { PUSH string "not enough key-signature matches" ; FAILWITH } { UNIT } } ;
                         RIGHT (pair (pair (list (option key)) (list (option signature))) bytes int) } } ;
                 DROP ;
                 DUP 4 ;
                 CDR ;
                 SIZE ;
                 INT ;
                 PUSH int 3 ;
                 PUSH int 2 ;
                 DIG 2 ;
                 MUL ;
                 EDIV ;
                 IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                 CAR ;
                 DUP 3 ;
                 PAIR ;
                 DIG 4 ;
                 CDR ;
                 DUP 5 ;
                 CAR ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 PAIR ;
                 LEFT unit ;
                 LOOP_LEFT
                   { UNPAIR ;
                     UNPAIR ;
                     DIG 2 ;
                     UNPAIR ;
                     DIG 2 ;
                     IF_CONS
                       { IF_NONE
                           { DIG 3 ;
                             IF_CONS
                               { DROP ; DIG 3 ; DIG 3 ; PAIR ; SWAP ; DIG 2 ; PAIR ; PAIR ; LEFT unit }
                               { DROP 3 ;
                                 PUSH string "validator_keys and validators have different size" ;
                                 FAILWITH } }
                           { DIG 4 ;
                             IF_CONS
                               { DIG 2 ;
                                 HASH_KEY ;
                                 COMPARE ;
                                 EQ ;
                                 IF { PUSH int 1 ;
                                      DIG 4 ;
                                      SUB ;
                                      DIG 3 ;
                                      PAIR ;
                                      SWAP ;
                                      DIG 2 ;
                                      PAIR ;
                                      PAIR ;
                                      LEFT unit }
                                    { DROP 4 ;
                                      PUSH string "validator_key does not match validator hash" ;
                                      FAILWITH } }
                               { DROP 4 ;
                                 PUSH string "validator_keys and validators have different size" ;
                                 FAILWITH } } }
                       { DROP ;
                         SWAP ;
                         IF_CONS
                           { DROP 3 ;
                             PUSH string "validator_keys and validators have different size" ;
                             FAILWITH }
                           { PUSH int 0 ;
                             SWAP ;
                             COMPARE ;
                             GT ;
                             IF { PUSH string "not enough keys" ; FAILWITH } { UNIT } } ;
                         RIGHT (pair (pair (list (option key)) (list key_hash)) bytes int) } } ;
                 DROP ;
                 DUP 3 ;
                 CDR ;
                 CDR ;
                 DUP 4 ;
                 CDR ;
                 CAR ;
                 CDR ;
                 DIG 4 ;
                 CAR ;
                 CDR ;
                 CDR ;
                 PAIR ;
                 DIG 2 ;
                 DIG 3 ;
                 PAIR ;
                 PAIR ;
                 PAIR ;
                 SWAP ;
                 UNPAIR ;
                 UNPAIR ;
                 UNIT ;
                 DUP 5 ;
                 CAR ;
                 CDR ;
                 CAR ;
                 SWAP ;
                 SOME ;
                 SWAP ;
                 UPDATE } ;
             PAIR ;
             PAIR ;
             SWAP ;
             PAIR ;
             NIL operation }
           { DUP ;
             CDR ;
             CAR ;
             DUP 2 ;
             CAR ;
             CDR ;
             DIG 4 ;
             UNPAIR ;
             UNPAIR ;
             DUP ;
             DUP 6 ;
             MEM ;
             PUSH string "unknown handles hash" ;
             PAIR ;
             DUP 9 ;
             SWAP ;
             EXEC ;
             DROP ;
             DUP 2 ;
             DUP 5 ;
             CAR ;
             CDR ;
             CAR ;
             MEM ;
             NOT ;
             PUSH string "already used handle" ;
             PAIR ;
             DUP 9 ;
             SWAP ;
             EXEC ;
             DROP ;
             SENDER ;
             DUP 5 ;
             CAR ;
             CDR ;
             CDR ;
             COMPARE ;
             EQ ;
             PUSH string "only the owner can withdraw a handle" ;
             PAIR ;
             DUP 9 ;
             SWAP ;
             EXEC ;
             DROP ;
             DUP 6 ;
             CDR ;
             CDR ;
             PUSH int 1 ;
             DUP 2 ;
             SIZE ;
             INT ;
             SUB ;
             DIG 6 ;
             DUG 2 ;
             PAIR ;
             PAIR ;
             LEFT unit ;
             LOOP_LEFT
               { UNPAIR ;
                 UNPAIR ;
                 SWAP ;
                 IF_CONS
                   { UNPAIR ;
                     DUP 2 ;
                     DUP 2 ;
                     CONCAT ;
                     BLAKE2B ;
                     DIG 5 ;
                     COMPARE ;
                     EQ ;
                     PUSH string "invalid proof hash" ;
                     PAIR ;
                     DUP 12 ;
                     SWAP ;
                     EXEC ;
                     DROP ;
                     PUSH nat 0 ;
                     DUP 9 ;
                     CAR ;
                     CDR ;
                     CAR ;
                     DUP 6 ;
                     ABS ;
                     PUSH nat 1 ;
                     LSL ;
                     AND ;
                     COMPARE ;
                     NEQ ;
                     IF { DROP } { SWAP ; DROP } ;
                     SWAP ;
                     PUSH int 1 ;
                     DIG 3 ;
                     SUB ;
                     PAIR ;
                     PAIR ;
                     LEFT unit }
                   { DROP ;
                     DUP 5 ;
                     PACK ;
                     BLAKE2B ;
                     SWAP ;
                     COMPARE ;
                     EQ ;
                     PUSH string "invalid handle data" ;
                     PAIR ;
                     DUP 8 ;
                     SWAP ;
                     EXEC ;
                     RIGHT (pair (pair int (list (pair bytes bytes))) bytes) } } ;
             DIG 7 ;
             DROP 2 ;
             DIG 2 ;
             NONE (ticket bytes) ;
             DUP 5 ;
             CAR ;
             CAR ;
             CDR ;
             DUP 6 ;
             CDR ;
             PAIR ;
             GET_AND_UPDATE ;
             IF_NONE { DROP ; PUSH string "unreachable" ; FAILWITH } { PAIR } ;
             UNPAIR ;
             READ_TICKET ;
             CDR ;
             CDR ;
             DUP 6 ;
             CAR ;
             CAR ;
             CAR ;
             SWAP ;
             SUB ;
             ABS ;
             DUP 6 ;
             CAR ;
             CAR ;
             CAR ;
             PAIR ;
             SWAP ;
             SPLIT_TICKET ;
             IF_NONE { PUSH string "unreachable" ; FAILWITH } {} ;
             UNPAIR ;
             DUG 2 ;
             DUP 6 ;
             CAR ;
             CAR ;
             CDR ;
             DUP 7 ;
             CDR ;
             PAIR ;
             SWAP ;
             SOME ;
             SWAP ;
             UPDATE ;
             SWAP ;
             DIG 5 ;
             CAR ;
             CAR ;
             PUSH mutez 0 ;
             DIG 2 ;
             TRANSFER_TOKENS ;
             SWAP ;
             DIG 3 ;
             UNIT ;
             DIG 5 ;
             CAR ;
             CDR ;
             CAR ;
             SWAP ;
             SOME ;
             SWAP ;
             UPDATE ;
             DIG 3 ;
             PAIR ;
             PAIR ;
             NIL operation ;
             DIG 2 ;
             CONS ;
             SWAP ;
             DIG 2 ;
             PAIR ;
             SWAP } ;
         PAIR } }

